"""added request and request categories tables

Revision ID: f7f61b0fadff
Revises: 7292deb23125
Create Date: 2020-11-07 21:34:58.470451

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'f7f61b0fadff'
down_revision = '7292deb23125'
branch_labels = None
depends_on = None


t_roles = sa.Table(
    'permissions',
    sa.MetaData(),
    sa.Column('id', sa.Integer),
    sa.Column('app_name', sa.String),
    sa.Column('action', sa.String),
    sa.Column('role_id', sa.Integer)
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'request_categories',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'requests',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=50), nullable=False),
        sa.Column('description', sa.String(length=400), nullable=False),
        sa.Column('created', sa.DateTime(timezone=True), nullable=False),
        sa.Column('creator_id', sa.Integer(), nullable=False),
        sa.Column('departament_id', sa.Integer(), nullable=False),
        sa.Column('category_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            tuple(['category_id']), ['request_categories.id'],
        ),
        sa.ForeignKeyConstraint(tuple(['creator_id']), ['users.id'], ),
        sa.ForeignKeyConstraint(tuple(['departament_id']), ['roles.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    connection = op.get_bind()

    connection.execute(
        sa.insert(t_roles).values([
            {'app_name': 'categories', 'action': 'create', 'role_id': 1},
            {'app_name': 'categories', 'action': 'update', 'role_id': 1},
        ])
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('requests')
    op.drop_table('request_categories')
    connection = op.get_bind()

    connection.execute(
        sa.delete(t_roles).where(t_roles.c.app_name == 'categories')
    )
    # ### end Alembic commands ###
